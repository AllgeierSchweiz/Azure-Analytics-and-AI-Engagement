{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "environment_code": {
      "type": "String",
      "metadata": {
        "description": "Suffix added to all resource name to make them unique. Should consist of only lower case alphabet and numbers. Total length should be less than 6 characters."
      }
    },
    "sql_administrator_login_password": {
      "type": "SecureString",
      "metadata": {
        "description": "Password for SQL Admin. Should have atleast one capital, one small alphapbet with one digit and one special character.Password should be at least 8 characters long."
      }
    },
    "pbi_workspace_id": {
      "type": "String",
      "metadata": {
        "description": "PowerBi workspace Id."
      }
    },
    "powerbi_streaming_dataset_url_media": {
      "type": "String",
      "metadata": {
        "description": "PowerBi streaming dataset URL."
      }
    },
    "video_indexer_account_id": {
      "type": "String",
      "metadata": {
        "description": "Video indexer account ID."
      }
    },
    "video_indexer_api_key": {
      "type": "String",
      "metadata": {
        "description": "Video indexer API key."
      }
    }
  },
  "variables": {
    "resource_group_name": "[resourceGroup().name]",
    "subscriptionid": "[subscription().subscriptionId]",
    "unique_suffix": "[concat(uniqueString(deployment().name), '-', parameters('environment_code'))]",
    "location": "[resourceGroup().location]",
    "source_storage_container": "media-assets",
    "cosmos_account_name_media": "[if(greater(length(concat('cosmosdb-media-', uniqueString(deployment().name),parameters('environment_code'))), 43), substring(concat('cosmosdb-media-', uniqueString(deployment().name),parameters('environment_code')),0,43) , concat('cosmosdb-media-', uniqueString(deployment().name),parameters('environment_code')) )]",
    "cosmos_database_name_media": "videoindexer",
    "cosmos_database_container_name_videoindexerinsights": "videoindexerinsights",
    "cosmos_database_container_name_Transcript": "transcript",
    "storage_account_name": "[if(greater(length(concat('stmedia', parameters('environment_code'),uniqueString(deployment().name))), 24), substring(concat('stmedia',parameters('environment_code'),uniqueString(deployment().name)),0,24) , concat('stmedia',parameters('environment_code'),uniqueString(deployment().name)) )]",
    "workspace_name_synapsemedia": "[concat('synapsemedia',parameters('environment_code'),uniqueString(deployment().name))]",
    "default_data_lake_storage_file_system_name": "tempdata",
    "default_data_lake_storage_account_url": "[concat('https://', variables('storage_account_name'), '.dfs.core.windows.net')]",
    "sql_compute_name": "MediaDW",
    "sql_administrator_login_id": "labsqladmin",
    "spark_compute_name": "Media",
    "sql_server_sku": "DW100c",
    "spark_auto_scale_enabled": "true",
    "spark_min_node_count": "3",
    "spark_max_node_count": "20",
    "spark_node_count": "1",
    "spark_node_size_family": "MemoryOptimized",
    "spark_node_size": "Large",
    "spark_auto_pause_enabled": "true",
    "spark_auto_pause_delay_in_minutes": "5",
    "spark_version": "2.4",
    "packages_requirements_file_name": "requirements.txt",
    "packages_requirements_content": "seaborn==0.10.1\nxgboost==1.0.2\nonnxruntime==1.0.0\nwerkzeug==0.16.1\nnimbusml==1.7.1\nruamel.yaml==0.16.9\nazureml-train-automl-runtime==1.6.0\nscikit-learn==0.20.3\nnumpy==1.16.2\npandas==0.23.4\nscipy==1.4.1",
    "mediaservices_name": "[concat('mediasvc',uniqueString(deployment().name))]",
    "event_topic_media_indexer_name": "[concat('event-topic-media-indexer-',variables('unique_suffix'))]",
    "event_topic_storage_trigger_name": "[concat('event-topic-storage-trigger-',variables('unique_suffix'))]",
    "storage_account_external_id": "[concat('/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('resource_group_name'),'/Microsoft.Storage/storageAccounts/',variables('storage_account_name'))]",
    "connections_azureblob_name": "[concat('conn-azureblob-',variables('unique_suffix'))]",
    "connections_mongodb_name": "[concat('conn-mongodb-',variables('unique_suffix'))]",
    "connections_cosmosdb_name": "[concat('conn-documentdb-',variables('unique_suffix'))]",
    "workflows_logic_storage_trigger_name": "[concat('logic-app-storage-trigger-',variables('unique_suffix'))]",
    "workflows_logic_video_indexer_trigger_name": "[concat('logic-app-video-trigger-',variables('unique_suffix'))]",
    "func_media_livestreaming_asp_name": "[concat('func-asp-media-livestreaming-',variables('unique_suffix'))]",
    "func_media_livestreaming_ai_name": "[concat('func-ai-media-livestreaming-',variables('unique_suffix'))]",
    "func_media_livestreaming_storage_name": "[if(greater(length(concat('stlivestream', parameters('environment_code'),uniqueString(deployment().name))), 24), substring(concat('stlivestream',parameters('environment_code'),uniqueString(deployment().name)),0,24) , concat('stlivestream',parameters('environment_code'),uniqueString(deployment().name)) )]",
    "func_media_livestreaming_app_name": "[concat('func-app-media-livestreaming-',variables('unique_suffix'))]",
    "func_media_recommendation_service_asp_name": "[concat('func-asp-media-recommendation-',variables('unique_suffix'))]",
    "func_media_recommendation_service_ai_name": "[concat('func-ai-media-recommendation-',variables('unique_suffix'))]",
    "func_media_recommendation_service_storage_name": "[if(greater(length(concat('strecservice', parameters('environment_code'),uniqueString(deployment().name))), 24), substring(concat('strecservice',parameters('environment_code'),uniqueString(deployment().name)),0,24) , concat('strecservice',parameters('environment_code'),uniqueString(deployment().name)) )]",
    "func_media_recommendation_service_app_name": "[concat('func-app-media-recommendation-',variables('unique_suffix'))]",
    "func_model_builder_service_asp_name": "[concat('func-asp-model-builder-',variables('unique_suffix'))]",
    "func_model_builder_service_ai_name": "[concat('func-ai-model-builder-',variables('unique_suffix'))]",
    "func_model_builder_service_storage_name": "[if(greater(length(concat('stmodelbuilder', parameters('environment_code'),uniqueString(deployment().name))), 24), substring(concat('stvideorec',parameters('environment_code'),uniqueString(deployment().name)),0,24) , concat('stvideorec',parameters('environment_code'),uniqueString(deployment().name)) )]",
    "func_model_builder_service_app_name": "[concat('func-app-model-builder-',variables('unique_suffix'))]",
    "func_media_transcript_asp_name": "[concat('func-asp-media-transcript-',variables('unique_suffix'))]",
    "func_media_transcript_storage_name": "[if(greater(length(concat('sttranscript', parameters('environment_code'),uniqueString(deployment().name))), 24), substring(concat('sttranscript',parameters('environment_code'),uniqueString(deployment().name)),0,24) , concat('stmongodata',parameters('environment_code'),uniqueString(deployment().name)) )]",
    "func_media_transcript_app_name": "[concat('func-app-media-transcript-',variables('unique_suffix'))]",
    "app_demomedia_ase_name": "[concat('app-asp-demomedia-',variables('unique_suffix'))]",
    "app_demomedia_app_service_name": "[concat('app-demomedia-',variables('unique_suffix'))]",
    "app_media_search_ase_name": "[concat('app-asp-media-search-',variables('unique_suffix'))]",
    "app_media_search_app_service_name": "[concat('app-media-search-',variables('unique_suffix'))]",
    "key_vault_name": "[concat('kv-',variables('unique_suffix'))]",
    "logic_app_storage_trigger_url": "[concat(resourceId('Microsoft.Logic/workflows/', variables('workflows_logic_storage_trigger_name')), '/triggers/manual')]",
    "logic_app_indexer_trigger_url": "[concat(resourceId('Microsoft.Logic/workflows/', variables('workflows_logic_video_indexer_trigger_name')), '/triggers/manual')]",
    "logic_app_concatfunc": "[concat('concat(decodeUriComponent(''https%3A%2F%2Fapi.videoindexer.ai%2Ftrial%2FAccounts%2F',parameters('video_indexer_account_id'),'%2FVideos%2F''), triggerOutputs()[''queries''][''id''], decodeUriComponent(''%2FIndex''))')]"
  },
  "resources": [
    {
      "name": "default",
      "type": "Microsoft.Resources/tags",
      "apiVersion": "2019-10-01",
      "properties": {
        "tags": {
          "DeploymentId": "[parameters('environment_code')]",
          "UniqueId": "[uniqueString(deployment().name)]",
          "WsId": "[parameters('pbi_workspace_id')]",
          "PbiDatasetUrl": "[parameters('powerbi_streaming_dataset_url_media')]",
          "VideoIndexerAccountId": "[parameters('video_indexer_account_id')]",
          "VideoIndexerApiKey": "[parameters('video_indexer_api_key')]"
        }
      }
    },
    {
      "name": "[variables('connections_azureblob_name')]",
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "location": "[variables('location')]",
      "kind": "V1",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name'))]"
      ],
      "properties": {
        "displayName": "azureblob",
        "parameterValues": {
          "accountName": "[variables('storage_account_name')]",
          "accessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('storage_account_name')),'2019-04-01').keys[0].value]"
        },
        "api": {
          "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', variables('location'), '/managedApis/azureblob')]"
        }
      }
    },
    {
      "name": "[variables('connections_cosmosdb_name')]",
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "location": "[variables('location')]",
      "kind": "V1",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos_account_name_media'))]"
      ],
      "properties": {
        "displayName": "documentdb",
        "parameterValues": {
          "databaseAccount": "[variables('cosmos_account_name_media')]",
          "accessKey": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos_account_name_media')), providers('Microsoft.DocumentDB', 'databaseAccounts').apiVersions[0]).primaryMasterKey]"
        },
        "api": {
          "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', variables('location'), '/managedApis/documentdb')]"
        }
      }
    },
    {
      "name": "[variables('workflows_logic_storage_trigger_name')]",
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('connections_azureblob_name'))]",
        "[resourceId('Microsoft.Logic/workflows', variables('workflows_logic_video_indexer_trigger_name'))]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {

              },
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "items": {
                    "properties": {
                      "data": {
                        "properties": {
                          "api": {
                            "type": "string"
                          },
                          "blobType": {
                            "type": "string"
                          },
                          "clientRequestId": {
                            "type": "string"
                          },
                          "contentLength": {
                            "type": "integer"
                          },
                          "contentType": {
                            "type": "string"
                          },
                          "eTag": {
                            "type": "string"
                          },
                          "requestId": {
                            "type": "string"
                          },
                          "sequencer": {
                            "type": "string"
                          },
                          "storageDiagnostics": {
                            "properties": {
                              "batchId": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "url": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "dataVersion": {
                        "type": "string"
                      },
                      "eventTime": {
                        "type": "string"
                      },
                      "eventType": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "metadataVersion": {
                        "type": "string"
                      },
                      "subject": {
                        "type": "string"
                      },
                      "topic": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "topic",
                      "subject",
                      "eventType",
                      "id",
                      "data",
                      "dataVersion",
                      "metadataVersion",
                      "eventTime"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          },
          "actions": {
            "For_each": {
              "foreach": "@triggerBody()",
              "actions": {
                "Create_SAS_URI_by_path": {
                  "runAfter": {

                  },
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "Permissions": "Read"
                    },
                    "host": {
                      "connection": {
                        "name": "[concat('@parameters(''$connections'')','[''',variables('connections_azureblob_name'),'''][''connectionId'']')]"
                      }
                    },
                    "method": "post",
                    "path": "/datasets/default/CreateSharedLinkByPath",
                    "queries": {
                      "path": "@{substring(items('For_each')?['data']?['url'], indexof(items('For_each')?['data']?['url'], 'source-files'))}"
                    }
                  }
                },
                "HTTP": {
                  "runAfter": {
                    "Create_SAS_URI_by_path": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http",
                  "inputs": {
                    "headers": {
                      "Content-Type\n": "multipart/form-data",
                      "Ocp-Apim-Subscription-Key\n": "[parameters('video_indexer_api_key')]"
                    },
                    "method": "POST",
                    "queries": {
                      "accessToken": "@{body('Get_Video_Indexer_Token')}",
                      "accountId": "[parameters('video_indexer_account_id')]",
                      "callbackUrl": "[listCallbackURL(variables('logic_app_indexer_trigger_url'), '2019-05-01').value]",
                      "language": "English",
                      "location": "[variables('location')]",
                      "name": "@{substring(substring(items('For_each')?['data']?['url'], indexof(items('For_each')?['data']?['url'], 'source-files')), 13)}",
                      "privacy": "Public",
                      "videoUrl": "@{body('Create_SAS_URI_by_path')?['WebUrl']}"
                    },
                    "uri": "[concat('https://api.videoindexer.ai/trial/Accounts/',parameters('video_indexer_account_id'),'/Videos')]"
                  }
                }
              },
              "runAfter": {
                "Get_Video_Indexer_Token": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Get_Video_Indexer_Token": {
              "runAfter": {

              },
              "type": "Http",
              "inputs": {
                "headers": {
                  "Ocp-Apim-Subscription-Key": "[parameters('video_indexer_api_key')]"
                },
                "method": "GET",
                "uri": "[concat('https://api.videoindexer.ai/Auth/trial/Accounts/',parameters('video_indexer_account_id'),'/AccessToken?allowEdit=true')]"
              }
            }
          },
          "outputs": {

          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "[variables('connections_azureblob_name')]": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('connections_azureblob_name'))]",
                "connectionName": "[variables('connections_azureblob_name')]",
                "id": "[concat('/subscriptions/',variables('subscriptionId'),'/providers/Microsoft.Web/locations/',variables('location'),'/managedApis/azureblob')]"
              }
            }
          }
        }
      }
    },
    {
      "name": "[variables('workflows_logic_video_indexer_trigger_name')]",
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('connections_cosmosdb_name'))]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {

              },
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "method": "POST"
              }
            }
          },
          "actions": {
            "Condition": {
              "actions": {
                "Create_or_update_document_(V2)": {
                  "runAfter": {
                    "Get_Video_Insights": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiConnection",
                  "inputs": {
                    "body": "@body('Get_Video_Insights')",
                    "host": {
                      "connection": {
                        "name": "[concat('@parameters(''$connections'')','[''',variables('connections_cosmosdb_name'),'''][''connectionId'']')]"
                      }
                    },
                    "method": "post",
                    "path": "/v3/dbs/@{encodeURIComponent('videoindexer')}/colls/@{encodeURIComponent('videoindexerinsights')}/docs"
                  }
                },
                "Get_Video_Indexer_Token": {
                  "runAfter": {

                  },
                  "type": "Http",
                  "inputs": {
                    "headers": {
                      "Ocp-Apim-Subscription-Key": "[parameters('video_indexer_api_key')]"
                    },
                    "method": "GET",
                    "uri": "[concat('https://api.videoindexer.ai/Auth/trial/Accounts/',parameters('video_indexer_account_id'),'/AccessToken?allowEdit=true')]"
                  }
                },
                "Get_Video_Insights": {
                  "runAfter": {
                    "Get_Video_Indexer_Token": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http",
                  "inputs": {
                    "headers": {
                      "Ocp-Apim-Subscription-Key\n": "[parameters('video_indexer_api_key')]"
                    },
                    "method": "GET",
                    "queries": {
                      "accessToken": "@{body('Get_Video_Indexer_Token')}"
                    },
                    "uri": "[variables('logic_app_concatfunc')]"
                  }
                }
              },
              "runAfter": {

              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@triggerOutputs()['queries']['state']",
                      "Processed"
                    ]
                  }
                ]
              },
              "type": "If"
            }
          },
          "outputs": {

          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "[variables('connections_cosmosdb_name')]": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('connections_cosmosdb_name'))]",
                "connectionName": "[variables('connections_cosmosdb_name')]",
                "id": "[concat('/subscriptions/',variables('subscriptionId'),'/providers/Microsoft.Web/locations/',variables('location'),'/managedApis/documentdb')]"
              }
            }
          }
        }
      }
    },
    {
      "name": "[variables('event_topic_storage_trigger_name')]",
      "type": "Microsoft.EventGrid/systemTopics",
      "apiVersion": "2020-10-15-preview",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name'))]"
      ],
      "properties": {
        "source": "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name'))]",
        "topicType": "Microsoft.Storage.StorageAccounts"
      }
    },
    {
      "type": "Microsoft.Media/mediaservices",
      "apiVersion": "2018-07-01",
      "name": "[variables('mediaservices_name')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name'))]"
      ],
      "properties": {
        "storageAccounts": [
          {
            "id": "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name'))]",
            "type": "Primary"
          }
        ]
      }
    },
    {
      "name": "[variables('event_topic_media_indexer_name')]",
      "type": "Microsoft.EventGrid/systemTopics",
      "apiVersion": "2020-10-15-preview",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Media/mediaservices', variables('mediaservices_name'))]"
      ],
      "properties": {
        "source": "[resourceId('Microsoft.Media/mediaservices', variables('mediaservices_name'))]",
        "topicType": "Microsoft.Media.MediaServices"
      }
    },
    {
      "name": "[concat(variables('event_topic_storage_trigger_name'), '/event-storage-trigger')]",
      "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
      "apiVersion": "2020-10-15-preview",
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/systemTopics', variables('event_topic_storage_trigger_name'))]"
      ],
      "properties": {
        "destination": {
          "properties": {
            "maxEventsPerBatch": 1,
            "preferredBatchSizeInKilobytes": 64
          },
          "endpointType": "WebHook",
          "properties": {
            "endpointUrl": "[listCallbackURL(variables('logic_app_storage_trigger_url'), '2019-05-01').value]"
          }
        },
        "filter": {
          "subjectBeginsWith": "/blobServices/default/containers/source-files/blobs/",
          "subjectEndsWith": ".mp4",
          "includedEventTypes": [
            "Microsoft.Storage.BlobCreated"
          ]
        },
        "labels": [

        ],
        "eventDeliverySchema": "EventGridSchema",
        "retryPolicy": {
          "maxDeliveryAttempts": 30,
          "eventTimeToLiveInMinutes": 1440
        }
      }
    },
    {
      "name": "[concat(variables('event_topic_media_indexer_name'), '/VideoIndexerAmsNotifications')]",
      "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
      "apiVersion": "2020-10-15-preview",
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/systemTopics', variables('event_topic_media_indexer_name'))]"
      ],
      "properties": {
        "destination": {
          "properties": {
            "maxEventsPerBatch": 1,
            "preferredBatchSizeInKilobytes": 64
          },
          "endpointType": "WebHook",
          "properties": {
            "endpointUrl": "[listCallbackURL(variables('logic_app_indexer_trigger_url'), '2019-05-01').value]"
          }
        },
        "filter": {
          "includedEventTypes": [
            "Microsoft.Media.JobStateChange",
            "Microsoft.Media.JobScheduled",
            "Microsoft.Media.JobProcessing",
            "Microsoft.Media.JobCanceling",
            "Microsoft.Media.JobFinished",
            "Microsoft.Media.JobCanceled",
            "Microsoft.Media.JobErrored",
            "Microsoft.Media.JobOutputStateChange",
            "Microsoft.Media.JobOutputScheduled",
            "Microsoft.Media.JobOutputProcessing",
            "Microsoft.Media.JobOutputCanceling",
            "Microsoft.Media.JobOutputFinished",
            "Microsoft.Media.JobOutputCanceled",
            "Microsoft.Media.JobOutputErrored",
            "Microsoft.Media.LiveEventEncoderConnected",
            "Microsoft.Media.LiveEventIncomingStreamReceived",
            "Microsoft.Media.LiveEventEncoderDisconnected",
            "Microsoft.Media.LiveEventConnectionRejected",
            "Microsoft.Media.LiveEventTrackDiscontinuityDetected",
            "Microsoft.Media.LiveEventIncomingVideoStreamsOutOfSync",
            "Microsoft.Media.LiveEventIncomingDataChunkDropped",
            "Microsoft.Media.LiveEventIncomingStreamsOutOfSync",
            "Microsoft.Media.LiveEventIngestHeartbeat",
            "Microsoft.Media.JobOutputProgress"
          ]
        },
        "eventDeliverySchema": "EventGridSchema",
        "retryPolicy": {
          "maxDeliveryAttempts": 30,
          "eventTimeToLiveInMinutes": 1440
        }
      }
    },
    {
      "name": "[toLower(variables('cosmos_account_name_media'))]",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2019-12-12",
      "location": "[variables('location')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Eventual"
        },
        "locations": [
          {
            "locationName": "[variables('location')]"
          }
        ],
        "databaseAccountOfferType": "Standard",
        "enableAnalyticalStorage": true,
        "publicNetworkAccess": "Enabled",
        "ipRangeFilter": "0.0.0.0"
      }
    },
    {
      "name": "[concat(variables('cosmos_account_name_media'), '/', toLower(variables('cosmos_database_name_media')))]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2019-12-12",
      "dependsOn": [
        "[concat('Microsoft.DocumentDB/databaseAccounts/', toLower(variables('cosmos_account_name_media')))]"
      ],
      "properties": {
        "resource": {
          "id": "[variables('cosmos_database_name_media')]"
        }
      }
    },
    {
      "name": "[concat(variables('cosmos_account_name_media'), '/', variables('cosmos_database_name_media'), '/', variables('cosmos_database_container_name_videoindexerinsights'))]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-04-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_media'),variables('cosmos_database_name_media'))]"
      ],
      "properties": {
        "resource": {
          "id": "[variables('cosmos_database_container_name_videoindexerinsights')]",
          "indexingPolicy": {
            "automatic": true,
            "indexingMode": "consistent",
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash"
          },
          "analyticalStorageTtl": -1,
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          }
        },
        "options": {
          "autoscaleSettings": {
            "maxThroughput": "4000"
          }
        }
      }
    },
    {
      "name": "[concat(variables('cosmos_account_name_media'), '/', variables('cosmos_database_name_media'), '/', variables('cosmos_database_container_name_Transcript'))]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-04-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases',variables('cosmos_account_name_media'),variables('cosmos_database_name_media'))]"
      ],
      "properties": {
        "resource": {
          "id": "[variables('cosmos_database_container_name_Transcript')]",
          "indexingPolicy": {
            "automatic": true,
            "indexingMode": "consistent",
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [
              "/videoid"
            ],
            "kind": "Hash"
          },
          "analyticalStorageTtl": -1,
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          }
        },
        "options": {
          "autoscaleSettings": {
            "maxThroughput": "4000"
          }
        }
      }
    },
    {
      "name": "[variables('storage_account_name')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2020-08-01-preview",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      },
      "resources": [
        {
          "type": "blobServices/containers",
          "apiVersion": "2018-07-01",
          "name": "[concat('default/', variables('default_data_lake_storage_file_system_name'))]",
          "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name'))]"
          ]
        }
      ]
    },
    {
      "name": "[concat(variables('storage_account_name'), '/default')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": [
			{
              "allowedOrigins": [
                "*"
              ],
              "allowedMethods": [
                "GET"             
              ],
              "maxAgeInSeconds": 1000,
              "exposedHeaders": [
                "*"
              ],
              "allowedHeaders": [
                "*"
              ]
            },
			{
              "allowedOrigins": [
                "*"
              ],
              "allowedMethods": [
                "POST"             
              ],
              "maxAgeInSeconds": 1000,
              "exposedHeaders": [
                "*"
              ],
              "allowedHeaders": [
                "*"
              ]
            },
			{
              "allowedOrigins": [
                "*"
              ],
              "allowedMethods": [
                "DELETE"             
              ],
              "maxAgeInSeconds": 1000,
              "exposedHeaders": [
                "*"
              ],
              "allowedHeaders": [
                "*"
              ]
            },
			{
              "allowedOrigins": [
                "*"
              ],
              "allowedMethods": [
                "MERGE"             
              ],
              "maxAgeInSeconds": 1000,
              "exposedHeaders": [
                "*"
              ],
              "allowedHeaders": [
                "*"
              ]
            }
          ]
        }
      }
    },
    {
      "name": "[concat(variables('storage_account_name'), '/default')]",
      "type": "Microsoft.Storage/storageAccounts/queueServices",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": [

          ]
        }
      }
    },
    {
      "name": "[concat(variables('storage_account_name'), '/default')]",
      "type": "Microsoft.Storage/storageAccounts/tableServices",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": [

          ]
        }
      }
    },
    {
      "name": "[concat(variables('storage_account_name'), '/default/azure-webjobs-hosts')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "name": "[concat(variables('storage_account_name'), '/default/azure-webjobs-secrets')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "name": "[concat(variables('storage_account_name'), '/default/dataload')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "Container"
      }
    },
    {
      "name": "[concat(variables('storage_account_name'), '/default/webappassets')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "Container"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/mediademocontent')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "Container"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/source-files')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "Container"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/twitter-data')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "Container"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/media-assets')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "Container"
      }
    },
    {
      "name": "[concat(variables('storage_account_name'), '/default/customcsv')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "Container"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/cogsearchdevstorage')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/cosmosdata')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/finalmediademostorage')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/images')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "Blob"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/mediadata')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/marketing-data')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/mediademosample-skillset-image-projection')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/recommendermodel')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "Container"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/samplecogsearchstorage')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/samplecogsearchstorageads')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/samplecogsearchstoragemovies')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/sampleknowledgestoredump')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/samplemediademotempkeyframe')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "Blob"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/samplemediaupdated')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/saphana')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "name": "[concat( variables('storage_account_name'), '/default/tweetdata')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices',  variables('storage_account_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts',  variables('storage_account_name'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "None"
      }
    },
    {
      "name": "[variables('workspace_name_synapsemedia')]",
      "type": "Microsoft.Synapse/workspaces",
       "apiVersion": "2021-05-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storage_account_name'), '/blobServices/default/containers/', variables('default_data_lake_storage_file_system_name'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "defaultDataLakeStorage": {
          "accountUrl": "[variables('default_data_lake_storage_account_url')]",
          "filesystem": "[variables('default_data_lake_storage_file_system_name')]"
        },
        "sqlAdministratorLogin": "[variables('sql_administrator_login_id')]",
        "sqlAdministratorLoginPassword": "[parameters('sql_administrator_login_password')]"
      },
      "resources": [
        {
          "type": "firewallrules",
           "apiVersion": "2021-05-01",
          "name": "allowAll",
          "location": "[variables('location')]",
          "dependsOn": [
            "[concat('Microsoft.Synapse/workspaces/', variables('workspace_name_synapsemedia'))]"
          ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "255.255.255.255"
          }
        }
      ]
    },
    {
      "name": "[concat(variables('workspace_name_synapsemedia'), '/', variables('spark_compute_name'))]",
      "type": "Microsoft.Synapse/workspaces/bigDataPools",
       "apiVersion": "2021-05-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Synapse/workspaces', variables('workspace_name_synapsemedia'))]"
      ],
      "properties": {
        "nodeCount": "[variables('spark_node_count')]",
        "nodeSizeFamily": "[variables('spark_node_size_family')]",
        "nodeSize": "[variables('spark_node_size')]",
        "autoScale": {
          "enabled": "[variables('spark_auto_scale_enabled')]",
          "minNodeCount": "[variables('spark_min_node_count')]",
          "maxNodeCount": "[variables('spark_max_node_count')]"
        },
        "autoPause": {
          "enabled": "[variables('spark_auto_pause_enabled')]",
          "delayInMinutes": "[variables('spark_auto_pause_delay_in_minutes')]"
        },
        "sparkVersion": "[variables('spark_version')]"
      }
    },
    {
      "name": "[concat(variables('workspace_name_synapsemedia'), '/', variables('sql_compute_name'))]",
      "type": "Microsoft.Synapse/workspaces/sqlPools",
       "apiVersion": "2021-05-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Synapse/workspaces/', variables('workspace_name_synapsemedia'))]"
      ],
      "sku": {
        "name": "[variables('sql_server_sku')]"
      },
      "properties": {
        "createMode": "Default",
        "collation": "SQL_Latin1_General_CP1_CI_AS"
      }
    },
    {
      "name": "[variables('func_media_livestreaming_asp_name')]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "location": "[variables('location')]",
      "sku": {
        "name": "B1"
      },
      "kind": "linux",
      "properties": {
        "reserved": true
      }
    },
    {
      "name": "[variables('func_media_livestreaming_storage_name')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-04-01",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "Storage",
      "location": "[variables('location')]",
      "properties": {

      }
    },
    {
      "name": "[variables('func_media_livestreaming_ai_name')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2018-05-01-preview",
      "location": "[variables('location')]",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Bluefield",
        "Request_Source": "rest"
      }
    },
    {
      "name": "[variables('func_media_livestreaming_app_name')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('func_media_livestreaming_storage_name'))]",
        "[concat('Microsoft.Web/serverfarms/', variables('func_media_livestreaming_asp_name'))]",
        "[concat('Microsoft.Insights/components/', variables('func_media_livestreaming_ai_name'))]"
      ],
      "kind": "functionapp",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('func_media_livestreaming_app_name'), '.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('func_media_livestreaming_app_name'), '.scm.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId(variables('resource_group_name'), 'Microsoft.Web/serverfarms', variables('func_media_livestreaming_asp_name'))]",
        "reserved": false,
        "siteConfig": {
          "netFrameworkVersion": "v4.0",
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('func_media_livestreaming_storage_name'), ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('func_media_livestreaming_storage_name')), '2019-04-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('func_media_livestreaming_storage_name'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('func_media_livestreaming_storage_name')), '2019-04-01').keys[0].value)]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "PowerbiStreamingUrl",
              "value": "[parameters('powerbi_streaming_dataset_url_media')]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('func_media_livestreaming_ai_name'))).InstrumentationKey]"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "true"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[variables('func_media_livestreaming_app_name')]"
            }
          ],
          "use32BitWorkerProcess": true,
          "managedPipelineMode": "Integrated",
          "cors": {
            "allowedOrigins": [
              "https://functions.azure.com",
              "https://functions-staging.azure.com",
              "https://functions-next.azure.com"
            ],
            "supportCredentials": false
          }
        },
        "containerSize": 1536,
        "httpsOnly": false
      }
    },
    {
      "name": "[variables('func_media_recommendation_service_asp_name')]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "location": "[variables('location')]",
      "sku": {
        "name": "B1"
      },
      "kind": "linux",
      "properties": {
        "reserved": true
      }
    },
    {
      "name": "[variables('func_media_recommendation_service_storage_name')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-04-01",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "Storage",
      "location": "[variables('location')]",
      "properties": {

      }
    },
    {
      "name": "[variables('func_media_recommendation_service_ai_name')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2018-05-01-preview",
      "location": "[variables('location')]",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Bluefield",
        "Request_Source": "rest"
      }
    },
    {
      "name": "[variables('func_media_recommendation_service_app_name')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('func_media_recommendation_service_storage_name'))]",
        "[concat('Microsoft.Web/serverfarms/', variables('func_media_recommendation_service_asp_name'))]",
        "[concat('Microsoft.Insights/components/', variables('func_media_recommendation_service_ai_name'))]"
      ],
      "kind": "functionapp",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('func_media_recommendation_service_app_name'), '.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('func_media_recommendation_service_app_name'), '.scm.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId(variables('resource_group_name'), 'Microsoft.Web/serverfarms', variables('func_media_recommendation_service_asp_name'))]",
        "reserved": false,
        "siteConfig": {
          "netFrameworkVersion": "v4.0",
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('func_media_recommendation_service_storage_name'), ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('func_media_recommendation_service_storage_name')), '2019-04-01').keys[0].value)]"
            },
			{
              "name": "CONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storage_account_name'), ';AccountKey=', listKeys(resourceId(variables('resource_group_name'),'Microsoft.Storage/storageAccounts', variables('storage_account_name')), '2019-04-01').keys[0].value,';EndpointSuffix=core.windows.net')]"
            },
			{
              "name": "CONTAINER_WITH_VIDEO_JSONS",
              "value": "finalmediademostorage"
            },
			{
              "name": "CONTAINER_WITH_MODELS",
              "value": "recommendermodel"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('func_media_recommendation_service_ai_name'))).InstrumentationKey]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "python"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "DISABLE_HUGO_BUILD",
              "value": "true"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "true"
            }
          ],
          "use32BitWorkerProcess": true,
          "managedPipelineMode": "Integrated",
          "cors": {
            "allowedOrigins": [
              "https://functions.azure.com",
              "https://functions-staging.azure.com",
              "https://functions-next.azure.com"
            ],
            "supportCredentials": false
          }
        },
        "containerSize": 1536,
        "httpsOnly": false
      }
    },
	  {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('func_media_recommendation_service_app_name'), '/web')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('func_media_recommendation_service_app_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php",
          "hostingstart.html"
        ],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "PYTHON|3.8",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "[concat('$', variables('func_media_recommendation_service_app_name'))]",
        "azureStorageAccounts": {

        },
        "scmType": "None",
        "use32BitWorkerProcess": true,
        "webSocketsEnabled": false,
        "alwaysOn": true,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": true
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": [

          ]
        },
        "autoHealEnabled": false,
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": false,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0
      }
    },
    {
      "name": "[variables('func_model_builder_service_asp_name')]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "location": "[variables('location')]",
      "sku": {
        "name": "B1"
      },
      "kind": "linux",
      "properties": {
        "reserved": true
      }
    },
    {
      "name": "[variables('func_model_builder_service_storage_name')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-04-01",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "Storage",
      "location": "[variables('location')]",
      "properties": {

      }
    },
    {
      "name": "[variables('func_model_builder_service_ai_name')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2018-05-01-preview",
      "location": "[variables('location')]",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Bluefield",
        "Request_Source": "rest"
      }
    },
    {
      "name": "[variables('func_model_builder_service_app_name')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('func_model_builder_service_storage_name'))]",
        "[concat('Microsoft.Web/serverfarms/', variables('func_model_builder_service_asp_name'))]",
        "[concat('Microsoft.Insights/components/', variables('func_model_builder_service_ai_name'))]"
      ],
      "kind": "functionapp",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('func_model_builder_service_app_name'), '.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('func_model_builder_service_app_name'), '.scm.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId(variables('resource_group_name'), 'Microsoft.Web/serverfarms', variables('func_model_builder_service_asp_name'))]",
        "reserved": false,
        "siteConfig": {
          "netFrameworkVersion": "v4.0",
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('func_model_builder_service_storage_name'), ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('func_model_builder_service_storage_name')), '2019-04-01').keys[0].value)]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('func_model_builder_service_ai_name'))).InstrumentationKey]"
            },
            {
              "name": "AzureWebJobs.recommender.Disabled",
              "value": "0"
            },
            {
              "name": "CONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storage_account_name'), ';AccountKey=', listKeys(resourceId(variables('resource_group_name'),'Microsoft.Storage/storageAccounts', variables('storage_account_name')), '2019-04-01').keys[0].value,';EndpointSuffix=core.windows.net')]"
            },
			{
              "name": "CONTAINER_WITH_VIDEO_JSONS",
              "value": "finalmediademostorage"
            },
			{
              "name": "CONTAINER_WITH_MODELS",
              "value": "recommendermodel"
            },
			{
              "name": "VIDEO_INDEXER_URL",
              "value": "[concat('https://api.videoindexer.ai/trial/Accounts/',parameters('video_indexer_account_id'),'/Videos/{}/Index?reTranslate=False&includeStreamingUrls=True')]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "python"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "DISABLE_HUGO_BUILD",
              "value": "true"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "true"
            }
          ],
          "use32BitWorkerProcess": true,
          "managedPipelineMode": "Integrated",
          "cors": {
            "allowedOrigins": [
              "https://functions.azure.com",
              "https://functions-staging.azure.com",
              "https://functions-next.azure.com"
            ],
            "supportCredentials": false
          }
        },
        "containerSize": 1536,
        "httpsOnly": false
      }
    },
	  {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('func_model_builder_service_app_name'), '/web')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('func_model_builder_service_app_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php",
          "hostingstart.html"
        ],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "PYTHON|3.8",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "[concat('$', variables('func_model_builder_service_app_name'))]",
        "azureStorageAccounts": {

        },
        "scmType": "None",
        "use32BitWorkerProcess": true,
        "webSocketsEnabled": false,
        "alwaysOn": true,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": true
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": [

          ]
        },
        "autoHealEnabled": false,
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": false,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2020-06-01",
      "name": "[variables('func_media_transcript_asp_name')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "B1"
      },
      "kind": "linux",
      "properties": {
        "reserved": true
      }
    },
    {
      "name": "[variables('func_media_transcript_storage_name')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-04-01",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "Storage",
      "location": "[variables('location')]",
      "properties": {

      }
    },
    {
      "name": "[variables('func_media_transcript_app_name')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('func_media_transcript_storage_name'))]",
        "[concat('Microsoft.Web/serverfarms/', variables('func_media_transcript_asp_name'))]",
        "[concat('Microsoft.DocumentDB/databaseAccounts/', toLower(variables('cosmos_account_name_media')))]"
      ],
      "kind": "functionapp",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('func_media_transcript_app_name'), '.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('func_media_transcript_app_name'), '.scm.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId(variables('resource_group_name'), 'Microsoft.Web/serverfarms', variables('func_media_transcript_asp_name'))]",
        "reserved": false,
        "siteConfig": {
          "netFrameworkVersion": "v4.0",
          "appSettings": [
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('func_media_transcript_storage_name'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('func_media_transcript_storage_name')), '2019-04-01').keys[0].value)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('func_media_transcript_storage_name'), ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('func_media_transcript_storage_name')), '2019-04-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('func_media_transcript_storage_name'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('func_media_transcript_storage_name')), '2019-04-01').keys[0].value)]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "collectionName",
              "value": "transcript"
            },
            {
              "name": "CosmosDbConnectionString",
              "value": "[concat('AccountEndpoint=https://', variables('cosmos_account_name_media'), '.documents.azure.com:443/;AccountKey=',listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos_account_name_media')), providers('Microsoft.DocumentDB', 'databaseAccounts').apiVersions[0]).primaryMasterKey)]"
            },
            {
              "name": "databaseName",
              "value": "videoindexer"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "true"
            },
            {
              "name": "STORAGE_CONTAINER_NAME",
              "value": "[variables('source_storage_container')]"
            },
            {
              "name": "STORAGE_FILE_NAME",
              "value": "videoindexer.json"
            }
          ],
          "use32BitWorkerProcess": true,
          "managedPipelineMode": "Integrated",
          "cors": {
            "allowedOrigins": [
              "https://functions.azure.com",
              "https://functions-staging.azure.com",
              "https://functions-next.azure.com"
            ],
            "supportCredentials": false
          }
        },
        "containerSize": 1536,
        "httpsOnly": false
      }
    },
    {
      "name": "[variables('app_demomedia_ase_name')]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2019-08-01",
      "location": "[variables('location')]",
      "sku": {
        "name": "S1"
      },
      "kind": "linux",
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('app_demomedia_app_service_name')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('app_demomedia_ase_name'))]"
      ],
      "kind": "app,linux",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('app_demomedia_app_service_name'), '.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('app_demomedia_app_service_name'), '.scm.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('app_demomedia_ase_name'))]",
        "reserved": false,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {

        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('app_demomedia_app_service_name'), '/web')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('app_demomedia_app_service_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php",
          "hostingstart.html"
        ],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "DOTNETCORE|3.1",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "[concat('$', variables('app_demomedia_app_service_name'))]",
        "azureStorageAccounts": {

        },
        "scmType": "None",
        "use32BitWorkerProcess": true,
        "webSocketsEnabled": false,
        "alwaysOn": true,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": true
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": [

          ]
        },
        "autoHealEnabled": false,
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": false,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0
      }
    },
    {
      "name": "[variables('app_media_search_ase_name')]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2019-08-01",
      "location": "[variables('location')]",
      "sku": {
        "name": "S1"
      },
      "kind": "linux",
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('app_media_search_app_service_name')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('app_media_search_ase_name'))]"
      ],
      "kind": "app,linux",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('app_media_search_app_service_name'), '.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('app_media_search_app_service_name'), '.scm.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('app_media_search_ase_name'))]",
        "reserved": false,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {

        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('app_media_search_app_service_name'), '/web')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('app_media_search_app_service_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php",
          "hostingstart.html"
        ],
        "netFrameworkVersion": "v4.0",
        "linuxFxVersion": "DOTNETCORE|3.1",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "[concat('$', variables('app_media_search_app_service_name'))]",
        "azureStorageAccounts": {

        },
        "scmType": "None",
        "use32BitWorkerProcess": true,
        "webSocketsEnabled": false,
        "alwaysOn": true,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": true
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": [

          ]
        },
        "autoHealEnabled": false,
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": false,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('key_vault_name')]",
      "apiVersion": "2018-02-14",
      "location": "[variables('location')]",
      "properties": {
        "enabledForDeployment": true,
        "enabledForDiskEncryption": true,
        "enabledForTemplateDeployment": true,
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [

        ],
        "sku": {
          "name": "Standard",
          "family": "A"
        },
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('key_vault_name'), '/SqlPassword')]",
      "apiVersion": "2018-02-14",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('key_vault_name'))]"
      ],
      "properties": {
        "value": "[parameters('sql_administrator_login_password')]"
      }
    }
  ],
  "outputs": {

  }
}
